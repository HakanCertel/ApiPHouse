// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YayinEviApi.Persistence.Contexts;

#nullable disable

namespace YayinEviApi.Persistence.Migrations
{
    [DbContext(typeof(YayinEviApiDbContext))]
    [Migration("20251011112636_mg_init")]
    partial class mg_init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgencyAgencyFile", b =>
                {
                    b.Property<Guid>("AgenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgencyFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AgenciesId", "AgencyFilesId");

                    b.HasIndex("AgencyFilesId");

                    b.ToTable("AgencyAgencyFile");
                });

            modelBuilder.Entity("AuthorAuthorFile", b =>
                {
                    b.Property<Guid>("AuthorFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorFilesId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("AuthorAuthorFile");
                });

            modelBuilder.Entity("MaterialMaterialFile", b =>
                {
                    b.Property<Guid>("MaterialFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialFilesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("MaterialMaterialFile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.Property<Guid>("ProductImageFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductImageFilesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductImageFile");
                });

            modelBuilder.Entity("PublishFileWork", b =>
                {
                    b.Property<Guid>("PublishFilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublishFilesId", "WorksId");

                    b.HasIndex("WorksId");

                    b.ToTable("PublishFileWork");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AgencyE.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte?>("LocalOrForeing")
                        .HasColumnType("tinyint");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("State")
                        .HasColumnType("tinyint");

                    b.Property<string>("TaxDeparmant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AgencyE.AgencyConnectionInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("AgencyConnectionInformations");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.Current", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appellation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrentState")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrentStatu")
                        .HasColumnType("tinyint");

                    b.Property<string>("DepartmentofPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LocalOrForeing")
                        .HasColumnType("tinyint");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currents");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.SubAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentofPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SubAddress");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.SubCurrent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appellation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CurrentState")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrentStatu")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("DepartmentofPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LocalOrForeing")
                        .HasColumnType("tinyint");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SubCurrent");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.FileManagement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhichClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhichPage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileManagements");

                    b.HasDiscriminator().HasValue("FileManagement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.GoodsAccepE.GoodsAcceptItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UnitId");

                    b.ToTable("GoodsAcceptItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.GoodsAcceptE.GoodsAccep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcceptCellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptCellofWarehouseId");

                    b.ToTable("GoodsAcceps");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.ProccessCategoryE.ProccessCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProccessCategories");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.ProccessE.Proccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProccessCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProccessCategoryId");

                    b.ToTable("Proccesses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.WorkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("WorkCategories");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.WorkType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HubMessagesE.HubMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatingUserNameSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowed")
                        .HasColumnType("bit");

                    b.Property<string>("MessageBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Readed")
                        .HasColumnType("bit");

                    b.Property<string>("SendedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HubMessages");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.MaterialE.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HallofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte?>("MaterialType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShelfofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CellofWarehouseId");

                    b.HasIndex("HallofWarehouseId");

                    b.HasIndex("ShelfofWarehouseId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ProjectE.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ContractFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ContractPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("WorkId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.RezervationE.Rezervation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChildCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RezervationQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RezervationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RezervationStatu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CellofWarehouseId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Rezervations");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.SalesE.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CurrencyType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("CurrentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeliveryCurrentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FixDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendedShippingOrder")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MainDiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("DeliveryCurrentId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.SalesE.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendedShippingOrder")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ItemDiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("TaxType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ShipE.Ship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurrentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShipCellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("ShipCellofWarehouseId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ShipE.ShipItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UnitId");

                    b.ToTable("ShipItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MaterialUnits");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.AssignedUserToShippingWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShippingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingOrderId");

                    b.ToTable("AssignedUserToShippingWork");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultCell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShelfofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShelfofWarehouseId");

                    b.ToTable("CellesofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HallofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallofWarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("HallofWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCollectionCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderCollections");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderCollectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CollectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SaleItemId");

                    b.ToTable("OrderCollectionItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderDistributed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderDistributeds");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderItemDistributed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CollectedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DistributedCellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DistributedCellId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SaleItemId");

                    b.ToTable("OrderItemDistributeds");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShelfofWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HallofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallofWarehouseId");

                    b.ToTable("ShelfofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShippingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplededCollection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompletedPacking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartedCollection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStartedPacking")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OrderCollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderPackingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProccessedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ShippingOrderState")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("SaleItemId");

                    b.ToTable("ShippingOrders");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CellofWarehouseId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UnitId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.StockCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockCounts");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.StockCountItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("StockCountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CellofWarehouseId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("StockCountId");

                    b.HasIndex("UnitId");

                    b.ToTable("StockCountItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.StockMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EnteringCellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MovementClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MovementQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OutgoingCellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnteringCellId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OutgoingCellId");

                    b.HasIndex("UnitId");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.TransferDemandBetweenWarehouses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DemandedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TransferedCellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransferingCellofWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TransferedCellofWarehouseId");

                    b.HasIndex("TransferingCellofWarehouseId");

                    b.ToTable("TransferDemandsBetweenWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.TransferDemandItemBetweenWarehouses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DemandedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UnitId");

                    b.ToTable("TransferDemandItemsBetweenWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGoodsAcceptWareHouse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingWareHouse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkE.ProccessForWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProccessId");

                    b.HasIndex("WorkId");

                    b.ToTable("ProccessForWorks");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkE.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bandrol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstPrintingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastPrintingQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LasttPrintingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameDrawing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameReading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameReducting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTranslating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTypeSetting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrintingHouse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOrginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkAssignedUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkAssignedUsers");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatingUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("WorkState")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProccessId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectWorkOrders");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrderMessages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderMessages");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Şube.Sube", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Subes");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AgencyFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.ToTable("FileManagements", t =>
                        {
                            t.Property("Showcase")
                                .HasColumnName("AgencyFile_Showcase");
                        });

                    b.HasDiscriminator().HasValue("AgencyFile");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AuthorFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("AuthorFile");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.InvoiceFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("InvoiceFile");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.MaterialE.MaterialFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.ToTable("FileManagements", t =>
                        {
                            t.Property("Showcase")
                                .HasColumnName("MaterialFile_Showcase");
                        });

                    b.HasDiscriminator().HasValue("MaterialFile");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ProductImageFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.ToTable("FileManagements", t =>
                        {
                            t.Property("Showcase")
                                .HasColumnName("ProductImageFile_Showcase");
                        });

                    b.HasDiscriminator().HasValue("ProductImageFile");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.PublishFile", b =>
                {
                    b.HasBaseType("YayinEviApi.Domain.Entities.FileManagement");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkId")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("FileManagements", t =>
                        {
                            t.Property("Showcase")
                                .HasColumnName("PublishFile_Showcase");
                        });

                    b.HasDiscriminator().HasValue("PublishFile");
                });

            modelBuilder.Entity("AgencyAgencyFile", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AgencyE.Agency", null)
                        .WithMany()
                        .HasForeignKey("AgenciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.AgencyFile", null)
                        .WithMany()
                        .HasForeignKey("AgencyFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorAuthorFile", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AuthorFile", null)
                        .WithMany()
                        .HasForeignKey("AuthorFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialMaterialFile", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.MaterialFile", null)
                        .WithMany()
                        .HasForeignKey("MaterialFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.ProductImageFile", null)
                        .WithMany()
                        .HasForeignKey("ProductImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublishFileWork", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.PublishFile", null)
                        .WithMany()
                        .HasForeignKey("PublishFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WorkE.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AgencyE.AgencyConnectionInformation", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AgencyE.Agency", "Agency")
                        .WithMany("AgencyConnectionInformations")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Author", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AgencyE.Agency", "Agency")
                        .WithMany("Authors")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Basket", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.SubAddress", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.CurrentE.Current", "Parent")
                        .WithMany("SubAddresses")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.SubCurrent", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.CurrentE.Current", "Parent")
                        .WithMany("SubCurrents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.GoodsAccepE.GoodsAcceptItems", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.GoodsAcceptE.GoodsAccep", "Parent")
                        .WithMany("GoodsAcceptItemList")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Material");

                    b.Navigation("Parent");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.GoodsAcceptE.GoodsAccep", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "AcceptCellofWarehouse")
                        .WithMany()
                        .HasForeignKey("AcceptCellofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptCellofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.ProccessE.Proccess", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.ProccessCategoryE.ProccessCategory", "ProccessCategory")
                        .WithMany()
                        .HasForeignKey("ProccessCategoryId");

                    b.Navigation("ProccessCategory");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.HelperEntities.WorkCategory", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.MaterialE.Material", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "CellofWarehouse")
                        .WithMany()
                        .HasForeignKey("CellofWarehouseId");

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", "HallofWarehouse")
                        .WithMany()
                        .HasForeignKey("HallofWarehouseId");

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.ShelfofWarehouse", "ShelfofWarehouse")
                        .WithMany()
                        .HasForeignKey("ShelfofWarehouseId");

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("CellofWarehouse");

                    b.Navigation("HallofWarehouse");

                    b.Navigation("ShelfofWarehouse");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Order", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("YayinEviApi.Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ProjectE.Project", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AgencyE.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.HasOne("YayinEviApi.Domain.Entities.WorkE.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.RezervationE.Rezervation", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "CellofWarehouse")
                        .WithMany()
                        .HasForeignKey("CellofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany("Rezervations")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CellofWarehouse");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.SalesE.Sale", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.CurrentE.Current", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.CurrentE.SubCurrent", "DeliveryCurrent")
                        .WithMany()
                        .HasForeignKey("DeliveryCurrentId");

                    b.Navigation("Current");

                    b.Navigation("DeliveryCurrent");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.SalesE.SaleItem", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("YayinEviApi.Domain.Entities.SalesE.Sale", "Parent")
                        .WithMany("SaleItems")
                        .HasForeignKey("ParentId");

                    b.Navigation("Material");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ShipE.Ship", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.CurrentE.Current", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "ShipCellofWarehouse")
                        .WithMany()
                        .HasForeignKey("ShipCellofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Current");

                    b.Navigation("ShipCellofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ShipE.ShipItem", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.ShipE.Ship", "Parent")
                        .WithMany("ShipItemList")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Material");

                    b.Navigation("Parent");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.AssignedUserToShippingWork", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.ShippingOrder", "ShippingOrder")
                        .WithMany("AssignedUserToShippingWorks")
                        .HasForeignKey("ShippingOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingOrder");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.ShelfofWarehouse", "ShelfofWarehouse")
                        .WithMany("CellofWarehouses")
                        .HasForeignKey("ShelfofWarehouseId");

                    b.Navigation("ShelfofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", null)
                        .WithMany("HallofWarehouses")
                        .HasForeignKey("HallofWarehouseId");

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.Warehouse", "Warehouse")
                        .WithMany("HallofWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderCollectionItem", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.OrderCollection", "Parent")
                        .WithMany("OrderCollectionItems")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.SalesE.SaleItem", "SaleItem")
                        .WithMany()
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cell");

                    b.Navigation("Material");

                    b.Navigation("Parent");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderItemDistributed", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "DistributedCell")
                        .WithMany()
                        .HasForeignKey("DistributedCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.OrderDistributed", "Parent")
                        .WithMany("OrderItemsDistributed")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.SalesE.SaleItem", "SaleItem")
                        .WithMany()
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DistributedCell");

                    b.Navigation("Material");

                    b.Navigation("Parent");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShelfofWarehouse", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", "HallofWarehouse")
                        .WithMany()
                        .HasForeignKey("HallofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShippingOrder", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.SalesE.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("YayinEviApi.Domain.Entities.SalesE.SaleItem", "SaleItem")
                        .WithMany()
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("SaleItem");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.Stock", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "CellofWarehouse")
                        .WithMany()
                        .HasForeignKey("CellofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany("Stocks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("CellofWarehouse");

                    b.Navigation("Material");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.StockCountItems", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "CellofWarehouse")
                        .WithMany()
                        .HasForeignKey("CellofWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.StockCount", "StockCount")
                        .WithMany()
                        .HasForeignKey("StockCountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("CellofWarehouse");

                    b.Navigation("Material");

                    b.Navigation("StockCount");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.StockMovement", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "EnteringCell")
                        .WithMany()
                        .HasForeignKey("EnteringCellId");

                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "OutgoingCell")
                        .WithMany()
                        .HasForeignKey("OutgoingCellId");

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("EnteringCell");

                    b.Navigation("Material");

                    b.Navigation("OutgoingCell");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.TransferDemandBetweenWarehouses", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "TransferedCellofWarehouse")
                        .WithMany()
                        .HasForeignKey("TransferedCellofWarehouseId");

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.CellofWarehouse", "TransferingCellofWarehouse")
                        .WithMany()
                        .HasForeignKey("TransferingCellofWarehouseId");

                    b.Navigation("TransferedCellofWarehouse");

                    b.Navigation("TransferingCellofWarehouse");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.TransferDemandItemBetweenWarehouses", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.MaterialE.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WarehouseE.TransferDemandBetweenWarehouses", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.UnitE.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Material");

                    b.Navigation("Parent");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkE.ProccessForWork", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.ProccessE.Proccess", "Proccess")
                        .WithMany()
                        .HasForeignKey("ProccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YayinEviApi.Domain.Entities.WorkE.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proccess");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkE.Work", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.AgencyE.Agency", "Agency")
                        .WithMany("Works")
                        .HasForeignKey("AgencyId");

                    b.HasOne("YayinEviApi.Domain.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.WorkCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Agency");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkAssignedUsers", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrder", "WorkOrder")
                        .WithMany("WorkAssignedUsers")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrder", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.HelperEntities.ProccessE.Proccess", "Proccess")
                        .WithMany()
                        .HasForeignKey("ProccessId");

                    b.HasOne("YayinEviApi.Domain.Entities.ProjectE.Project", "Project")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Proccess");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrderMessages", b =>
                {
                    b.HasOne("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderMessages")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.AgencyE.Agency", b =>
                {
                    b.Navigation("AgencyConnectionInformations");

                    b.Navigation("Authors");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.CurrentE.Current", b =>
                {
                    b.Navigation("SubAddresses");

                    b.Navigation("SubCurrents");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.GoodsAcceptE.GoodsAccep", b =>
                {
                    b.Navigation("GoodsAcceptItemList");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.MaterialE.Material", b =>
                {
                    b.Navigation("Rezervations");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.Product", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ProjectE.Project", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.SalesE.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.ShipE.Ship", b =>
                {
                    b.Navigation("ShipItemList");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.HallofWarehouse", b =>
                {
                    b.Navigation("HallofWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderCollection", b =>
                {
                    b.Navigation("OrderCollectionItems");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.OrderDistributed", b =>
                {
                    b.Navigation("OrderItemsDistributed");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShelfofWarehouse", b =>
                {
                    b.Navigation("CellofWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.ShippingOrder", b =>
                {
                    b.Navigation("AssignedUserToShippingWorks");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WarehouseE.Warehouse", b =>
                {
                    b.Navigation("HallofWarehouses");
                });

            modelBuilder.Entity("YayinEviApi.Domain.Entities.WorkOrderE.WorkOrder", b =>
                {
                    b.Navigation("WorkAssignedUsers");

                    b.Navigation("WorkOrderMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
